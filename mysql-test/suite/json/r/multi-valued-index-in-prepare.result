DROP TABLE IF EXISTS t1;
DROP VIEW IF EXISTS v1;
CREATE TABLE t1 (
f1 VARCHAR(50) NOT NULL PRIMARY KEY,
f2 JSON NOT NULL,
INDEX idx2 ( (CAST(f2 AS CHAR(50) ARRAY)) )
);
CREATE VIEW v1 AS
SELECT * FROM t1, JSON_TABLE(f2, '$[*]' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH '$')) AS ids;
INSERT INTO t1 VALUES ('foo', '["aa", "bb"]');
INSERT INTO t1 VALUES ('bar', '["xx", "yy"]');
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT * FROM t1;
f1	f2
bar	["xx", "yy"]
foo	["aa", "bb"]
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1 WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	idx2	idx2	203	const	1	100.00	Using where
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1 WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	1	100.00	Using where
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1 WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	2	100.00	Using where
PREPARE stmt FROM 'EXPLAIN SELECT * FROM v1 WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	idx2	idx2	203	const	1	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'EXPLAIN SELECT * FROM v1 WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	1	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'EXPLAIN SELECT * FROM v1 WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	2	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	idx2	idx2	203	const	1	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	1	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'EXPLAIN SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	idx2	idx2	203	NULL	2	100.00	Using where
1	SIMPLE	ids	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Table function: json_table; Using temporary
PREPARE stmt FROM 'SELECT * FROM t1 WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
f1	f2
bar	["xx", "yy"]
PREPARE stmt FROM 'SELECT * FROM t1 WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
f1	f2
bar	["xx", "yy"]
PREPARE stmt FROM 'SELECT * FROM t1 WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
f1	f2
bar	["xx", "yy"]
PREPARE stmt FROM 'SELECT * FROM v1 WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
PREPARE stmt FROM 'SELECT * FROM v1 WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
PREPARE stmt FROM 'SELECT * FROM v1 WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
PREPARE stmt FROM 'SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE ? member of (f2)';
SET @a='xx';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
PREPARE stmt FROM 'SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE json_contains(f2, ?)';
SET @a='"xx"';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
PREPARE stmt FROM 'SELECT * FROM t1, JSON_TABLE(f2, \'$[*]\' COLUMNS(i FOR ORDINALITY, id VARCHAR(50) PATH \'$\')) AS ids WHERE json_overlaps(f2, ?)';
SET @a='["xx", "cc"]';
EXECUTE stmt USING @a;
f1	f2	i	id
bar	["xx", "yy"]	1	xx
bar	["xx", "yy"]	2	yy
DROP TABLE t1;
DROP VIEW v1;
